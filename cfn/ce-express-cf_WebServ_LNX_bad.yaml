AWSTemplateFormatVersion: 2010-09-09
Description: 'Cloud Formation Template for WebServer ASG'
Parameters:
  InstanceType:
    Description: WebServer instance type
    Type: String
    Default: t3.micro
  VpcStackName:
    Description: Provide the name of the VPC stack here. Must already exist!
    Type: String
    Default: ce-example-vpc
Resources:
  WebServerASG:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      DesiredCapacity: '2'
      MaxSize: '4'
      MinSize: '2'
      VPCZoneIdentifier:
        Fn::Split:
            - ","
            - Fn::ImportValue:
                Fn::Sub: ${VpcStackName}-PrivSub-IDs
      LaunchConfigurationName: !Ref WebServerLC
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      Tags:
      - Key: Name
        Value: 'WebServer'
        PropagateAtLaunch: "true"
  WebServerLC:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref WebServerSG
      ImageId: ami-082b5a644766e0e6f
      IamInstanceProfile: !Ref InstanceProfRole
      UserData: !Base64
        'Fn::Sub': |
          #!/bin/bash -xe
          # 1) Install App (Amazon Linux 2 specific)
          yum update -y
          systemctl start amazon-ssm-agent
          systemctl enable amazon-ssm-agent
          yum install -y httpd
          cd /var/www/html/
          curl -O 'https://ce-test-bg-image-onica.s3-us-west-2.amazonaws.com/index.html'
          # Can remove the start command and ask to SSH into instance.
          systemctl start httpd
          systemctl enable httpd
  WebServerSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH and HTTP access
      VpcId:
        Fn::ImportValue:
          Fn::Sub: ${VpcStackName}-VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: "10.0.0.0/16"
          Description: 'HTTP access'
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: "10.0.0.0/16"
          Description: 'HTTPS access'
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: "10.0.0.0/0"
  ApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets:
        Fn::Split:
            - ","
            - Fn::ImportValue:
                Fn::Sub: ${VpcStackName}-PubSub-IDs
      SecurityGroups:
        - !Ref WebServerSG
  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: '8080'
      Protocol: HTTP
  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckPath: '/error.html'
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 443
      Protocol: HTTPS
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: ${VpcStackName}-VPCID
  # Assign role to instance using InstanceProfile.
  InstanceProfRole:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref WebServerRole
  WebServerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
  # Necessary permissions to access EC2 or Session Manager (if required)
  WebServerPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: WebServerPolicy
      PolicyDocument:
        Statement:
          - Effect: "Allow"
            Action:
            - "ec2:*"
            - "ssm:*"
            Resource: "*"
      Roles:
        - !Ref WebServerRole
  LogsBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub 'ce-test-logs-${AWS::Region}-${AWS::AccountId}-lnx'
    DeletionPolicy: Delete
Outputs:
  URL:
    Description: URL of the website
    Value: !Join
      - ''
      - - 'http://'
        - Fn::GetAtt: [ ApplicationLoadBalancer, DNSName ]

